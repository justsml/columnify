{"mappings":"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","sources":["index.js","width.js","utils.js"],"sourcesContent":["\"use strict\"\n\nimport wcwidth from './width.js'\nimport { padRight, padCenter, padLeft, splitIntoLines, splitLongWords, truncateString } from './utils.js'\n\nconst DEFAULT_HEADING_TRANSFORM = key => key.toUpperCase()\n\nconst DEFAULT_DATA_TRANSFORM = (cell, column, index) => cell\n\nconst DEFAULTS = Object.freeze({\n  maxWidth: Infinity,\n  minWidth: 0,\n  columnSplitter: ' ',\n  truncate: false,\n  truncateMarker: '…',\n  preserveNewLines: false,\n  paddingChr: ' ',\n  showHeaders: true,\n  headingTransform: DEFAULT_HEADING_TRANSFORM,\n  dataTransform: DEFAULT_DATA_TRANSFORM\n})\n\nexport default function(items, options = {}) {\n\n  let columnConfigs = options.config || {}\n  delete options.config // remove config so doesn't appear on every column.\n\n  let maxLineWidth = options.maxLineWidth || Infinity\n  if (maxLineWidth === 'auto') maxLineWidth = process.stdout.columns || Infinity\n  delete options.maxLineWidth // this is a line control option, don't pass it to column\n\n  // Option defaults inheritance:\n  // options.config[columnName] => options => DEFAULTS\n  options = mixin({}, DEFAULTS, options)\n\n  options.config = options.config || Object.create(null)\n\n  options.spacing = options.spacing || '\\n' // probably useless\n  options.preserveNewLines = !!options.preserveNewLines\n  options.showHeaders = !!options.showHeaders;\n  options.columns = options.columns || options.include // alias include/columns, prefer columns if supplied\n  let columnNames = options.columns || [] // optional user-supplied columns to include\n\n  items = toArray(items, columnNames)\n\n  // if not suppled column names, automatically determine columns from data keys\n  if (!columnNames.length) {\n    items.forEach(function(item) {\n      for (let columnName in item) {\n        if (columnNames.indexOf(columnName) === -1) columnNames.push(columnName)\n      }\n    })\n  }\n\n  // initialize column defaults (each column inherits from options.config)\n  let columns = columnNames.reduce((columns, columnName) => {\n    let column = Object.create(options)\n    columns[columnName] = mixin(column, columnConfigs[columnName])\n    return columns\n  }, Object.create(null))\n\n  // sanitize column settings\n  columnNames.forEach(columnName => {\n    let column = columns[columnName]\n    column.name = columnName\n    column.maxWidth = Math.ceil(column.maxWidth)\n    column.minWidth = Math.ceil(column.minWidth)\n    column.truncate = !!column.truncate\n    column.align = column.align || 'left'\n  })\n\n  // sanitize data\n  items = items.map(item => {\n    let result = Object.create(null)\n    columnNames.forEach(columnName => {\n      // null/undefined -> ''\n      result[columnName] = item[columnName] != null ? item[columnName] : ''\n      // toString everything\n      result[columnName] = '' + result[columnName]\n      if (columns[columnName].preserveNewLines) {\n        // merge non-newline whitespace chars\n        result[columnName] = result[columnName].replace(/[^\\S\\n]/gmi, ' ')\n      } else {\n        // merge all whitespace chars\n        result[columnName] = result[columnName].replace(/\\s/gmi, ' ')\n      }\n    })\n    return result\n  })\n\n  // transform data cells\n  columnNames.forEach(columnName => {\n    let column = columns[columnName]\n    items = items.map((item, index) => {\n      let col = Object.create(column)\n      item[columnName] = column.dataTransform(item[columnName], col, index)\n\n      let changedKeys = Object.keys(col)\n      // disable default heading transform if we wrote to column.name\n      if (changedKeys.indexOf('name') !== -1) {\n        if (column.headingTransform !== DEFAULT_HEADING_TRANSFORM) return\n        column.headingTransform = heading => heading\n      }\n      changedKeys.forEach(key => column[key] = col[key])\n      return item\n    })\n  })\n\n  // add headers\n  let headers = {}\n  if(options.showHeaders) {\n    columnNames.forEach(columnName => {\n      let column = columns[columnName]\n\n      if(!column.showHeaders){\n        headers[columnName] = '';\n        return;\n      }\n\n      headers[columnName] = column.headingTransform(column.name)\n    })\n    items.unshift(headers)\n  }\n  // get actual max-width between min & max\n  // based on length of data in columns\n  columnNames.forEach(columnName => {\n    let column = columns[columnName]\n    column.width = items\n    .map(item => item[columnName])\n    .reduce((min, cur) => {\n      // if already at maxWidth don't bother testing\n      if (min >= column.maxWidth) return min\n      return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, wcwidth(cur))))\n    }, 0)\n  })\n\n  // split long words so they can break onto multiple lines\n  columnNames.forEach(columnName => {\n    let column = columns[columnName]\n    items = items.map(item => {\n      item[columnName] = splitLongWords(item[columnName], column.width, column.truncateMarker)\n      return item\n    })\n  })\n\n  // wrap long lines. each item is now an array of lines.\n  columnNames.forEach(columnName => {\n    let column = columns[columnName]\n    items = items.map((item, index) => {\n      let cell = item[columnName]\n      item[columnName] = splitIntoLines(cell, column.width)\n\n      // if truncating required, only include first line + add truncation char\n      if (column.truncate && item[columnName].length > 1) {\n        item[columnName] = splitIntoLines(cell, column.width - wcwidth(column.truncateMarker))\n        let firstLine = item[columnName][0]\n        if (!endsWith(firstLine, column.truncateMarker)) item[columnName][0] += column.truncateMarker\n        item[columnName] = item[columnName].slice(0, 1)\n      }\n      return item\n    })\n  })\n\n  // recalculate column widths from truncated output/lines\n  columnNames.forEach(columnName => {\n    let column = columns[columnName]\n    column.width = items.map(item => {\n      return item[columnName].reduce((min, cur) => {\n        if (min >= column.maxWidth) return min\n        return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, wcwidth(cur))))\n      }, 0)\n    }).reduce((min, cur) => {\n      if (min >= column.maxWidth) return min\n      return Math.max(min, Math.min(column.maxWidth, Math.max(column.minWidth, cur)))\n    }, 0)\n  })\n\n\n  let rows = createRows(items, columns, columnNames, options.paddingChr) // merge lines into rows\n  // conceive output\n  return rows.reduce((output, row) => {\n    return output.concat(row.reduce((rowOut, line) => {\n      return rowOut.concat(line.join(options.columnSplitter))\n    }, []))\n  }, [])\n  .map(line => truncateString(line, maxLineWidth))\n  .join(options.spacing)\n}\n\n/**\n * Convert wrapped lines into rows with padded values.\n *\n * @param Array items data to process\n * @param Array columns column width settings for wrapping\n * @param Array columnNames column ordering\n * @return Array items wrapped in arrays, corresponding to lines\n */\n\nfunction createRows(items, columns, columnNames, paddingChr) {\n  return items.map(item => {\n    let row = []\n    let numLines = 0\n    columnNames.forEach(columnName => {\n      numLines = Math.max(numLines, item[columnName].length)\n    })\n    // combine matching lines of each rows\n    for (let i = 0; i < numLines; i++) {\n      row[i] = row[i] || []\n      columnNames.forEach(columnName => {\n        let column = columns[columnName]\n        let val = item[columnName][i] || '' // || '' ensures empty columns get padded\n        if (column.align === 'right') row[i].push(padLeft(val, column.width, paddingChr))\n        else if (column.align === 'center' || column.align === 'centre') row[i].push(padCenter(val, column.width, paddingChr))\n        else row[i].push(padRight(val, column.width, paddingChr))\n      })\n    }\n    return row\n  })\n}\n\n/**\n * Object.assign\n *\n * @return Object Object with properties mixed in.\n */\n\nfunction mixin(...args) {\n  if (Object.assign) return Object.assign(...args)\n  return ObjectAssign(...args)\n}\n\nfunction ObjectAssign(target, firstSource) {\n  \"use strict\";\n  if (target === undefined || target === null)\n    throw new TypeError(\"Cannot convert first argument to object\");\n\n  var to = Object(target);\n\n  var hasPendingException = false;\n  var pendingException;\n\n  for (var i = 1; i < arguments.length; i++) {\n    var nextSource = arguments[i];\n    if (nextSource === undefined || nextSource === null)\n      continue;\n\n    var keysArray = Object.keys(Object(nextSource));\n    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {\n      var nextKey = keysArray[nextIndex];\n      try {\n        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n        if (desc !== undefined && desc.enumerable)\n          to[nextKey] = nextSource[nextKey];\n      } catch (e) {\n        if (!hasPendingException) {\n          hasPendingException = true;\n          pendingException = e;\n        }\n      }\n    }\n\n    if (hasPendingException)\n      throw pendingException;\n  }\n  return to;\n}\n\n/**\n * Adapted from String.prototype.endsWith polyfill.\n */\n\nfunction endsWith(target, searchString, position) {\n  position = position || target.length;\n  position = position - searchString.length;\n  let lastIndex = target.lastIndexOf(searchString);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\nfunction toArray(items, columnNames) {\n  if (Array.isArray(items)) return items\n  let rows = []\n  for (let key in items) {\n    let item = {}\n    item[columnNames[0] || 'key'] = key\n    item[columnNames[1] || 'value'] = items[key]\n    rows.push(item)\n  }\n  return rows\n}\n","import stripAnsi from 'strip-ansi'\nimport wcwidth from 'wcwidth'\n\nexport default function(str) {\n  return wcwidth(stripAnsi(str))\n}\n","\"use strict\"\n\nimport wcwidth from './width.js'\n\n/**\n * repeat string `str` up to total length of `len`\n *\n * @param String str string to repeat\n * @param Number len total length of output string\n */\n\nfunction repeatString(str, len) {\n  return Array.apply(null, {length: len + 1}).join(str).slice(0, len)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padRight(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return str + repeatString(chr || ' ', length)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padCenter will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padCenter(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  var lengthLeft = Math.floor(length/2)\n  var lengthRight = length - lengthLeft\n  return repeatString(chr || ' ', lengthLeft) + str + repeatString(chr || ' ', lengthRight)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`, on the left.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padLeft(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return repeatString(chr || ' ', length) + str\n}\n\n/**\n * Split a String `str` into lines of maxiumum length `max`.\n * Splits on word boundaries. Preserves existing new lines.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @return Array Array containing lines.\n */\n\nfunction splitIntoLines(str, max) {\n  function _splitIntoLines(str, max) {\n    return str.trim().split(' ').reduce(function(lines, word) {\n      var line = lines[lines.length - 1]\n      if (line && wcwidth(line.join(' ')) + wcwidth(word) < max) {\n        lines[lines.length - 1].push(word) // add to line\n      }\n      else lines.push([word]) // new line\n      return lines\n    }, []).map(function(l) {\n      return l.join(' ')\n    })\n  }\n  return str.split('\\n').map(function(str) {\n    return _splitIntoLines(str, max)\n  }).reduce(function(lines, line) {\n    return lines.concat(line)\n  }, [])\n}\n\n/**\n * Add spaces and `truncationChar` between words of\n * `str` which are longer than `max`.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @param Number truncationChar character to append to split words\n * @return String\n */\n\nfunction splitLongWords(str, max, truncationChar) {\n  str = str.trim()\n  var result = []\n  var words = str.split(' ')\n  var remainder = ''\n\n  var truncationWidth = wcwidth(truncationChar)\n\n  while (remainder || words.length) {\n    if (remainder) {\n      var word = remainder\n      remainder = ''\n    } else {\n      var word = words.shift()\n    }\n\n    if (wcwidth(word) > max) {\n      // slice is based on length no wcwidth\n      var i = 0\n      var wwidth = 0\n      var limit = max - truncationWidth\n      while (i < word.length) {\n        var w = wcwidth(word.charAt(i))\n        if (w + wwidth > limit) {\n          break\n        }\n        wwidth += w\n        ++i\n      }\n\n      remainder = word.slice(i) // get remainder\n      // save remainder for next loop\n\n      word = word.slice(0, i) // grab truncated word\n      word += truncationChar // add trailing … or whatever\n    }\n    result.push(word)\n  }\n\n  return result.join(' ')\n}\n\n\n/**\n * Truncate `str` into total width `max`\n * If `str` is shorter than `max`,  will return `str` unaltered.\n *\n * @param String str string to truncated\n * @param Number max total wcwidth of output string\n * @return String truncated str\n */\n\nfunction truncateString(str, max) {\n\n  str = str != null ? str : ''\n  str = String(str)\n\n  if(max == Infinity) return str\n\n  var i = 0\n  var wwidth = 0\n  while (i < str.length) {\n    var w = wcwidth(str.charAt(i))\n    if(w + wwidth > max)\n      break\n    wwidth += w\n    ++i\n  }\n  return str.slice(0, i)\n}\n\n\n\n/**\n * Exports\n */\n\nconst _padRight = padRight\nexport { _padRight as padRight }\nconst _padCenter = padCenter\nexport { _padCenter as padCenter }\nconst _padLeft = padLeft\nexport { _padLeft as padLeft }\nconst __splitIntoLines = splitIntoLines\nexport { __splitIntoLines as splitIntoLines }\nconst _splitLongWords = splitLongWords\nexport { _splitLongWords as splitLongWords }\nconst _truncateString = truncateString\nexport { _truncateString as truncateString }\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}